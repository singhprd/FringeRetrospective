# https://api.cognitive.microsoft.com/bing/v7.0/suggestions

# https://api.cognitive.microsoft.com/bing/v7.0/entities

# https://api.cognitive.microsoft.com/bing/v7.0/images

# https://api.cognitive.microsoft.com/bing/v7.0/news

# https://api.cognitive.microsoft.com/bing/v7.0/spellcheck

# https://api.cognitive.microsoft.com/bing/v7.0/videos

# https://api.cognitive.microsoft.com/bing/v7.0

# Key 1: aa76ff5e04ec4adaa056d822fb88de6b

# Key 2: 500c4584454240a4a52b3a1426b12f4a

require 'net/https'
require 'uri'
require 'json'

# **********************************************
# *** Update or verify the following values. ***
# **********************************************

# Replace the accessKey string value with your valid access key.
accessKey = "aa76ff5e04ec4adaa056d822fb88de6b"

# Verify the endpoint URI.  At this writing, only one endpoint is used for Bing
# search APIs.  In the future, regional endpoints may be available.  If you
# encounter unexpected authorization errors, double-check this value against
# the endpoint for your Bing Web search instance in your Azure dashboard.

uri  = "https://api.cognitive.microsoft.com"
path = "/bing/v7.0/search"

term = "Red Bastard: Lie With Me"
responseFilter = "Webpages"
answerCount = "1"
count = "1"

if accessKey.length != 32 then
    puts "Invalid Bing Search API subscription key!"
    puts "Please paste yours into the source code."
    abort
end

built_url = uri + path + "?q=" + URI.escape(term) + "+site:broadwaybaby.com/shows" + "&responseFilter=" + responseFilter + "&answerCount=" + answerCount + "&count=" + count 
uri = URI(built_url)

puts "Searching the Web for: " + term
puts built_url

request = Net::HTTP::Get.new(uri)
request['Ocp-Apim-Subscription-Key'] = accessKey

response = Net::HTTP.start(uri.host, uri.port, :use_ssl => uri.scheme == 'https') do |http|
    http.request(request)
end

puts "\nRelevant Headers:\n\n"
response.each_header do |key, value|
    # header names are coerced to lowercase
    if key.start_with?("bingapis-") or key.start_with?("x-msedge-") then
        puts key + ": " + value
    end
end

puts "\nJSON Response:\n\n"
puts JSON::pretty_generate(JSON(response.body))